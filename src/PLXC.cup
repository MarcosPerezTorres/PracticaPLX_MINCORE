import java_cup.runtime.*;
import java.text.ParseException;
import java.util.List;
import java.util.ArrayList;

parser code {:
    public void syntax_error(Symbol cur_token) {;}

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax Error. Línea: " + PLXC.lex.getLine() + ", Columna: " + PLXC.lex.getColumn());
        PLXC.out.println("# Syntax Error");
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
    }
:}

action code {:
    TablaSimbolos tabla;
    Integer bloqueActual;
    Integer idBloque, idSelect;
:}

init with {:
    action_obj.tabla = new TablaSimbolos();

    action_obj.bloqueActual = 0; // Bloque en el que me encuentro
    action_obj.idBloque = 0; // Contador de bloques
:}

/* TERMINALES */
terminal String IDENT;
terminal INT, CHAR, FLOAT, BOOLEAN, STRING;
terminal Integer ENTERO, CARACTER, BOOLEANO;
terminal Float REAL;
terminal String CADENA;
terminal CAST;

terminal ALL, CLL, AP, CP, AC, CC, ASIG, PUNTO, COMA, PYC, INTER, DP;
terminal IF, ELSE, FOR, FORALL, EXISTS, FROM, TO, DOWNTO, STEP, DO, WHILE, PRINT, LENGTH, REPEAT, TIMES, SELECT, DEFAULT, WHERE, FIRST, LAST, IN, CASE, SWITCH, BREAK, JUST;

terminal MAS, MENOS, MULT, DIV, MOD, L_SHIFT, R_SHIFT, ELVIS;
terminal MAS_IGUAL, MENOS_IGUAL, POR_IGUAL, DIV_IGUAL;
terminal MASMAS, MENOSMENOS;
terminal UNARIO;

terminal AND, OR, NOT, IMPLICA, DOBLEIMPLICA;
terminal MENOR, MENORIGUAL, MAYOR, MAYORIGUAL, IGUAL, DIST;

/* NO TERMINALES */
non terminal Bloque lista_sent;
non terminal Instruccion sent;
non terminal Instruccion exp;
non terminal Instruccion default;
non terminal SentSelect select;
non terminal Integer inicio_bloque;
non terminal ListaVar lista_declaracion;
non terminal List<SentSelect> lista_select;
non terminal List<Integer> dimension;
non terminal List<Case> lista_cases;
non terminal Instruccion array_index;
non terminal Bloque defaultSW;
non terminal Instruccion break_Opt;
non terminal Instruccion expIn;
non terminal Case case_sent;
non terminal ExpArray array, lista_exp;
non terminal Instruccion inicio_for, cond_for, act_for, step;
non terminal Instruccion lvalue;
non terminal Boolean dir_for, dir_select;
non terminal Tipo tipo;
non terminal String op_mult, op_aditivo, op_shift, op_relacional, op_asignacion, op_unario, op_unario_post;
non terminal Literal literal;

/* PRECEDENCIA */
precedence nonassoc AP,CP;
precedence left SELECT;
precedence left ELSE;
precedence left COMA;
precedence right ASIG;
precedence right INTER;
precedence right DP;
precedence right MAS_IGUAL, MENOS_IGUAL, POR_IGUAL, DIV_IGUAL;
precedence right IMPLICA, DOBLEIMPLICA;
precedence left OR;
precedence left AND;
precedence nonassoc NOT;
precedence left MAYOR, MAYORIGUAL, MENOR, MENORIGUAL, IGUAL, DIST;
precedence right ELVIS;
precedence left L_SHIFT, R_SHIFT;
precedence left MAS, MENOS;
precedence left MULT, DIV, MOD;

precedence nonassoc CAST;
precedence nonassoc UNARIO, MASMAS, MENOSMENOS;


/* GRAMÁTICA */
lista_sent ::=  lista_sent:b sent:s
                {:
                    b.addInstruccion(s);
                    RESULT = b;
                :}
            |   sent:s
                {:
                    Bloque b = new Bloque(PLXC.lex.getLine());
                    b.addInstruccion(s);
                    RESULT = b;
                :}
            ;

sent    ::= lista_declaracion:l PYC
            {:
                RESULT = l;
            :}
        |   exp:e PYC
            {:
                RESULT = e;
            :}
        |   FOR inicio_bloque:bloqueAnterior AP inicio_for:i PYC cond_for:c PYC act_for:a CP sent:s
            {:
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior;
                RESULT = new SentFOR(PLXC.lex.getLine(), i, c, a, s);
            :}
        |   REPEAT sent:s exp:e TIMES PYC
            {:
                RESULT = new SentRepeat(PLXC.lex.getLine(), s, e);
            :}
        |   REPEAT AP exp:e CP sent:s
            {:
                RESULT = new SentRepeat(PLXC.lex.getLine(), s, e);
            :}
        |   REPEAT JUST AP exp:e CP sent:s
            {:
                RESULT = new SentRepeatJust(PLXC.lex.getLine(), s , e);
            :}
        |   lista_select:l WHERE exp:e PYC
            {:
                String etqFinal = Objeto.nuevaEtiqueta();
                for(int i = 0; i < l.size(); i++) {
                    SentSelect s = l.get(i);
                    if(i > 0) {
                        s.setEtqInicioAnt(l.get(i-1).getEtqInicio());
                    }

                    if(i < l.size() - 1) {
                        SentSelect sig = l.get(i+1);
                        s.setCuerpo(sig);
                        s.setEtqDefaultSig(sig.getEtqDefault());            
                    } else {
                        s.setCuerpo(e);
                    }

                    s.setEtqFinal(etqFinal);
                }
                RESULT = l.get(0);
            :}
        |   FOR IDENT:i ASIG exp:e dir_for:dir exp:limite step:st DO sent:s
            {:
                Objeto obj = tabla.buscar(i);

                if(obj == null) {
                    throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
                }

                Variable var = (Variable) obj;

                if(var.getTipo() != TipoInt.instancia) {
                    throw new ParseException("Variable <" + var.getNombre() + "> no es de tipo " + Tipo.Predefinidos.INT, PLXC.lex.getLine());
                }

                Instruccion asig = new LlamadaMetodo(
                    PLXC.lex.getLine(),
                    new ExpVariable(PLXC.lex.getLine(), var),
                    Metodos.ASIGNAR,
                    new Instruccion[]{e}
                );

                RESULT = new SentFORPASCAL(PLXC.lex.getLine(), asig, var, limite, st, s, dir);
            :}
        |   WHILE AP exp:e CP sent:s
            {:
                RESULT = new SentWHILE(PLXC.lex.getLine(), e, s);
            :}
        |   DO sent:s WHILE AP exp:e CP PYC
            {:
                RESULT = new SentDOWHILE(PLXC.lex.getLine(), e, s);
            :}
        |   IF AP exp:e CP sent:s
            {:
                RESULT = new SentIF(PLXC.lex.getLine(), e, s, null);
            :}
        |   IF AP exp:e CP sent:s1 ELSE sent:s2
            {:
                RESULT = new SentIF(PLXC.lex.getLine(), e, s1, s2);
            :}
        |   PRINT AP exp:e CP PYC 
            {:
                RESULT = new LlamadaMetodo(
                    PLXC.lex.getLine(),
                    e,
                    Metodos.MOSTRAR,
                    null
                );
            :}
        |   PRINT AP array:a CP PYC 
            {:
                RESULT = new LlamadaMetodo(
                    PLXC.lex.getLine(),
                    a,
                    Metodos.MOSTRAR,
                    null
                );
            :}
        |   ALL inicio_bloque:bloqueAnterior lista_sent:l CLL 
            {:
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior; // Vuelvo al bloque anterior

                RESULT = l;
            :}
        |   FOR lvalue:l IN expIn:e DO sent:s
            {:
               RESULT = new SentFORIN(PLXC.lex.getLine(), l, e, s);
            :}
        |   SWITCH AP exp:e CP ALL lista_cases:l defaultSW:ds CLL
            {:
                RESULT = new SentSwitch(PLXC.lex.getLine(),e,l,ds);
            :}
        |   PYC
        ;

lista_cases ::= lista_cases:l case_sent:c
            {:
                l.add(c);
                RESULT = l;
            :}
            | case_sent:c 
            {:
                List<Case> l = new ArrayList<>();
                l.add(c);
                RESULT = l;
            :}
            ;

case_sent ::= CASE exp:e DP lista_sent:s break_Opt:brk
            {:
                RESULT = new Case(e,s,brk);
            :}
            | CASE exp:e DP break_Opt:brk
            {:
                RESULT = new Case(e,new Bloque(PLXC.lex.getLine()),brk);
            :}
            ;

break_Opt ::= BREAK PYC
            {:
                RESULT = new Break(PLXC.lex.getLine());
            :}
            |
            {:
                RESULT = null;
            :}
            ;

defaultSW ::= DEFAULT DP lista_sent:s
            {:
                RESULT = s;
            :}
            |
            {:
                RESULT = null;
            :}
            ;

lvalue  ::= IDENT:i
        {:
            Objeto obj = tabla.buscar(i);
                if (obj == null) {
                    throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
                }
                RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable)obj);
        :}
        |   array_index:a
        {:
            RESULT = a;
        :}
        ;

expIn ::= ALL lista_exp:l CLL
        {:
            RESULT = l;
        :}
      |  exp:a
        {:
            RESULT = a;
        :}
;

inicio_for  ::= lista_declaracion:l {: RESULT = l; :}
            |   exp:e               {: RESULT = e; :}
            |
            ;

cond_for    ::= exp:e {: RESULT = e; :}
            |
            ;

act_for     ::= exp:e {: RESULT = e; :}
            |
            ;

dir_for     ::= TO      {: RESULT = false; :}
            |   DOWNTO  {: RESULT = true; :}
            ;

step        ::= STEP exp:e {: RESULT = e; :}
            |
            {:
                // Valor por defecto del step
                Literal uno = new Literal(bloqueActual, TipoInt.instancia, 1);
                RESULT = new ExpLiteral(PLXC.lex.getLine(), uno);
            :}
            ;

default     ::= DEFAULT exp:e {: RESULT = e; :}
            |
            {:
                // Valor por defecto del default (sentencia select)
                Literal cero = new Literal(bloqueActual, TipoInt.instancia, 0);
                RESULT = new ExpLiteral(PLXC.lex.getLine(), cero);
            :}
            ;

dir_select  ::= FIRST {: RESULT = true; :}
            |   LAST  {: RESULT = false; :}
            |   /* Por defecto FIRST */ {: RESULT = true; :}
            ;

select      ::= SELECT dir_select:first IDENT:i FROM exp:from TO exp:to step:st default:df
                {:
                    Objeto obj = tabla.buscar(i);

                    if(obj == null) {
                        throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
                    }

                    Variable var = (Variable) obj;

                    RESULT = new SentSelect(PLXC.lex.getLine(), var, first, from, to, st, df);
                :}
            ;

lista_select    ::= lista_select:l select:s
                    {:
                        l.add(s);
                        RESULT = l;
                    :}
                |   select:s
                    {:
                        List<SentSelect> lista = new ArrayList<>();
                        lista.add(s);
                        RESULT = lista;
                    :}
                ;
                    

dimension   ::= dimension:d AC ENTERO:n CC
                {:
                    d.add(n);
                    RESULT = d;
                :}
            |   AC ENTERO:n CC
                {:
                    List<Integer> d = new ArrayList<>();
                    d.add(n);
                    RESULT = d;
                :}
            ;

array_index ::= IDENT:i AC exp:e CC
                {:
                    Objeto obj = tabla.buscar(i);

                    if(obj == null) {
                        throw new ParseException("Varaible <" + i + "> no ha sido declarada", PLXC.lex.getLine());
                    }

                    if(!(obj instanceof VariableArray)) {
                        throw new ParseException("Variable <" + i + "> no es de tipo array", PLXC.lex.getLine());
                    }

                    Instruccion var = new ExpVariable(PLXC.lex.getLine(), (VariableArray) obj);

                    RESULT = new LlamadaMetodo(
                        PLXC.lex.getLine(),
                        var,
                        Metodos.INDEXAR,
                        new Instruccion[]{e}
                    );
                :}
            |   array_index:v AC exp:e CC
                {:
                    RESULT = new LlamadaMetodo(
                        PLXC.lex.getLine(),
                        v,
                        Metodos.INDEXAR,
                        new Instruccion[]{e}
                    );
                :}
            ;

array   ::= ALL lista_exp:l CLL
            {:
                RESULT = l;
            :}
        ;


lista_exp   ::= lista_exp:l COMA exp:e
                {:
                    l.addInstruccion(e);
                    RESULT = l;
                :}
            |   lista_exp:l COMA array:a
                {:
                    l.addInstruccion(a);
                    RESULT = l;
                :}
            |   exp:e
                {:
                    ExpArray array = new ExpArray(PLXC.lex.getLine());
                    array.addInstruccion(e);
                    RESULT = array;
                :}
            |   array:a
                {:
                    ExpArray expArray = new ExpArray(PLXC.lex.getLine());
                    expArray.addInstruccion(a);
                    RESULT = expArray;
                :}
            ;

inicio_bloque ::= 
{:
    RESULT = bloqueActual; // Guardo el bloque en el que estaba
    idBloque++;
    bloqueActual = idBloque;
:}
;


lista_declaracion   ::= tipo:t IDENT:i
                        {:
                            Variable v;
                            if(t instanceof TipoString) {
                                v = new VariableArray(i, "0", bloqueActual, true, t);
                            } else {
                                v = new Variable(i, bloqueActual, true, t);
                            }
                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = new ListaVar(PLXC.lex.getLine(), t);
                        :}
                    |   tipo:t IDENT:i ASIG exp:e
                        {:
                            Variable v;
                            if(t instanceof TipoString) {
                                v = new VariableArray(i, "0", bloqueActual, true, t);
                            } else {
                                v = new Variable(i, bloqueActual, true, t);
                            }
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            ListaVar l = new ListaVar(PLXC.lex.getLine(), t);
                            l.addInstruccion(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodos.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        :}
                    |   tipo:t IDENT:i dimension:d
                        {:
                            Tipo tipoBase = t;
                            Tipo tipo = null;
                            String desp = "0"; 
                            for(int pos = d.size()-1; pos >= 0; pos--) {
                                tipo = new TipoArray(d.get(pos), tipoBase);
                                tipoBase = tipo;
                            }

                            Variable v = new VariableArray(i, desp, bloqueActual, true, tipo);
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            RESULT = new ListaVar(PLXC.lex.getLine(), tipo);
                        :}
                    |   tipo:t IDENT:i dimension:d ASIG array:a
                        {:
                            Tipo tipoBase = t;
                            Tipo tipo = null;
                            String desp = "0"; 
                            for(int pos = d.size()-1; pos >= 0; pos--) {
                                tipo = new TipoArray(d.get(pos), tipoBase);
                                tipoBase = tipo;
                            }

                            Variable v = new VariableArray(i, desp, bloqueActual, true, tipo);
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            ListaVar l = new ListaVar(PLXC.lex.getLine(), tipo);
                            l.addInstruccion(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodos.CREAR_VARIABLE,
                                    new Instruccion[]{a}
                                )
                            );

                            RESULT = l;
                        :}
                    |   lista_declaracion:l COMA IDENT:i
                        {:
                            Variable v;
                            if(l.getTipo() instanceof TipoString) {
                                v = new VariableArray(i, "0", bloqueActual, true, l.getTipo());
                            } else {
                                v = new Variable(i, bloqueActual, true, l.getTipo());
                            }

                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = l;
                        :}  
                    |   lista_declaracion:l COMA IDENT:i ASIG exp:e
                        {:
                            Variable v;
                            if(l.getTipo() instanceof TipoString) {
                                v = new VariableArray(i, "0", bloqueActual, true, l.getTipo());
                            } else {
                                v = new Variable(i, bloqueActual, true, l.getTipo());
                            }
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            l.addInstruccion(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodos.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        :}
                    ;

exp ::= literal:l 
        {:
            RESULT = new ExpLiteral(PLXC.lex.getLine(), l);            
        :}
    |   IDENT:i
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable) obj);
        :}
    |   array_index:v
        {:
            RESULT = v;
        :}
    |   IDENT:i op_asignacion:op exp:e
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                op,
                new Instruccion[]{e}
            );
        :} %prec ASIG
    |   IDENT:i op_asignacion:op array:a // Asignación arrays
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                op,
                new Instruccion[]{a}
            );
        :} %prec ASIG
    |   array_index:v op_asignacion:op exp:e
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                v,
                op,
                new Instruccion[]{e}
            );
        :}
    |   array_index:v op_asignacion:op array:a // Asignación sub-arrays
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                v,
                op,
                new Instruccion[]{a}
            );
        :}
    |   IDENT:i PUNTO LENGTH
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            if(!(obj instanceof VariableArray)) {
                throw new ParseException("Variable <" + i + "> no es de un tipo indexable", PLXC.lex.getLine());
            }

            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                Metodos.LENGTH,
                null
            );
        :}
    |   exp:e1 op_aditivo:op exp:e2
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        :} %prec MAS
    |   exp:e1 op_mult:op exp:e2
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        :} %prec MULT
    |   exp:e1 op_shift:op exp:e2
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        :} %prec L_SHIFT
    |   exp:e1 op_relacional:op exp:e2
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        :} %prec IGUAL
    |   exp:e1 IMPLICA exp:e2
        {:
            Instruccion i = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodos.NOT, null); // !e1
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                i,
                Metodos.OR,
                e2
            ); // !e1 || e2 === e1 --> e2
        :}
     |   exp:e1 DOBLEIMPLICA exp:e2
        {:
            Instruccion i1 = new CortoCircuito(PLXC.lex.getLine(), e1, Metodos.AND, e2); // e1 && e2
            Instruccion i2_1 = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodos.NOT, null); // !e1
            Instruccion i2_2 = new LlamadaMetodo(PLXC.lex.getLine(), e2, Metodos.NOT, null); // !e2
            Instruccion i2 = new CortoCircuito(PLXC.lex.getLine(), i2_1, Metodos.AND, i2_2); // !e1 && !e2
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                i1,
                Metodos.OR,
                i2
            ); // (e1 && e2) || (!e1 && !e2) e1 <--> e2
        :}
    
    |   exp:e1 AND exp:e2
        {:
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                e1,
                Metodos.AND,
                e2
            );
        :}
    |   exp:e1 OR exp:e2
        {:
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                e1,
                Metodos.OR,
                e2
            );
        :}
    |   NOT exp:e
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodos.NOT,
                null
            );
        :}
    |   op_unario:op exp:e
        {:
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        :} %prec UNARIO
    |   exp:e op_unario_post:op
        {:
            RESULT = new CopiaYLlama(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        :} %prec MASMAS
    |   AP exp:e CP
        {:
            RESULT = e;
        :}
    |   AP tipo:t CP exp:e
        {:
            ExpTipo et = new ExpTipo(PLXC.lex.getLine(), t);
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodos.CAST,
                new Instruccion[]{et}
            );
        :} %prec CAST
    |   FORALL IDENT:i COMA exp:e
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            Variable var = (Variable) obj;

            if(var.getTipo() != TipoBool.instancia) {
                throw new ParseException("Variable <" + var.getNombre() + "> no es de tipo " + Tipo.Predefinidos.BOOL, PLXC.lex.getLine());
            }

            Literal uno = new Literal(bloqueActual, TipoInt.instancia, 1);
            Instruccion st = new ExpLiteral(PLXC.lex.getLine(), uno);

            RESULT = new ForAll(
                PLXC.lex.getLine(),
                var,
                0, 1, st,
                e
            );
        :}
    |   FORALL IDENT:i FROM ENTERO:left TO ENTERO:right step:st COMA exp:e
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            Variable var = (Variable) obj;

            if(var.getTipo() != TipoInt.instancia) {
                throw new ParseException("Variable <" + var.getNombre() + "> no es de tipo " + Tipo.Predefinidos.INT, PLXC.lex.getLine());
            }

            RESULT = new ForAll(
                PLXC.lex.getLine(),
                var,
                left, right, st,
                e
            );
        :}
    |   EXISTS IDENT:i COMA exp:e
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null){
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            Variable var = (Variable) obj;

            if(var.getTipo() != TipoBool.instancia){
                throw new ParseException("Variable <" + var.getNombre() + "> no es de tipo " + Tipo.Predefinidos.BOOL, PLXC.lex.getLine());
            }

            Literal uno = new Literal(bloqueActual,TipoInt.instancia,1);
            Instruccion st = new ExpLiteral(PLXC.lex.getLine(), uno);

             RESULT = new Exists(
                PLXC.lex.getLine(),
                var,
                0, 1, st,
                e
            );
        :}
    |   EXISTS IDENT:i FROM ENTERO:left TO ENTERO:right step:st COMA exp:e
        {:
            Objeto obj = tabla.buscar(i);

            if(obj == null){
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            Variable var = (Variable) obj;

            if(var.getTipo() != TipoInt.instancia){
                throw new ParseException("Variable <" + var.getNombre() + "> no es de tipo " + Tipo.Predefinidos.INT, PLXC.lex.getLine());
            }

            RESULT = new Exists(
                PLXC.lex.getLine(),
                var,
                left, right, st,
                e
            );
        
        :}
    |   exp:e1 INTER exp:e2 DP exp:e3
        {:
            
            RESULT = new Ternario(PLXC.lex.getLine(), e1, e2, e3);
        
        :}
    |   exp:e1 ELVIS exp:e2 
        {:
            RESULT = new Elvis(PLXC.lex.getLine(), e1, e2);
        
        :}
    ;


op_aditivo  ::= MAS     {: RESULT = Metodos.SUMA; :}
            |   MENOS   {: RESULT = Metodos.RESTA; :}
            ;

op_mult ::= MULT    {: RESULT = Metodos.PRODUCTO; :}
        |   DIV     {: RESULT = Metodos.DIVISION; :}
        |   MOD     {: RESULT = Metodos.MODULO; :}
        ;

op_shift    ::= L_SHIFT {: RESULT = Metodos.L_SHIFT; :}
            |   R_SHIFT {: RESULT = Metodos.R_SHIFT; :}
            ;

op_relacional   ::= MENOR       {: RESULT = Metodos.MENOR; :}
                |   MENORIGUAL  {: RESULT = Metodos.MENOR_IGUAL; :}
                |   MAYOR       {: RESULT = Metodos.MAYOR; :}
                |   MAYORIGUAL  {: RESULT = Metodos.MAYOR_IGUAL; :}
                |   IGUAL       {: RESULT = Metodos.IGUAL; :}
                |   DIST        {: RESULT = Metodos.DISTINTO; :}
                ;

op_asignacion   ::= ASIG        {: RESULT = Metodos.ASIGNAR; :}
                |   MAS_IGUAL   {: RESULT = Metodos.MAS_IGUAL; :}
                |   MENOS_IGUAL {: RESULT = Metodos.MENOS_IGUAL; :}
                |   POR_IGUAL   {: RESULT = Metodos.POR_IGUAL; :}
                |   DIV_IGUAL   {: RESULT = Metodos.DIV_IGUAL; :}
                ;

op_unario   ::= MENOS       {: RESULT = Metodos.OPUESTO; :}
            |   MAS         {: RESULT = Metodos.MASUNARIO; :}
            |   MASMAS      {: RESULT = Metodos.SIG; :}
            |   MENOSMENOS  {: RESULT = Metodos.ANT; :}
            ;

op_unario_post  ::= MASMAS       {: RESULT = Metodos.SIG; :}
                |   MENOSMENOS   {: RESULT = Metodos.ANT; :}
                ;

tipo    ::= INT     {: RESULT = TipoInt.instancia; :}
        |   CHAR    {: RESULT = TipoChar.instancia; :}
        |   FLOAT   {: RESULT = TipoFloat.instancia; :}
        |   BOOLEAN {: RESULT = TipoBool.instancia; :}
        |   STRING  {: RESULT = new TipoString(0); :}
        |   tipo:t AC CC {: RESULT = new TipoArray(0,t); :}
        ;

literal ::= ENTERO:e    {: RESULT = new Literal(bloqueActual, TipoInt.instancia, e); :}
        |   CARACTER:c  {: RESULT = new Literal(bloqueActual, TipoChar.instancia, c); :}
        |   REAL:r      {: RESULT = new Literal(bloqueActual, TipoFloat.instancia, r); :}
        |   BOOLEANO:b  {: RESULT = new Literal(bloqueActual, TipoBool.instancia, b); :}
        |   CADENA:c    {: RESULT = new Literal(bloqueActual, new TipoString(c.length()), c); :}
        ;
